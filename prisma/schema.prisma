// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum LevelCourse {
  CURTA_DURACAO
  TECNICO_MEDIO
  LICENCIATURA
  RELIGIOSO
  MESTRADO
}

enum Period {
  LABORAL
  POS_LABORAL
}

enum Gender {
  MASCULINO
  FEMININO
}

enum MaritalStatus {
  SOLTEIRO // Solteiro(a)
  CASADO // Casado(a)
  DIVORCIADO // Divorciado(a)
  VIUVO // Viúvo(a)
}

enum ProvincyAddress {
  MAPUTO_CIDADE
  MAPUTO_PROVINCIA
  GAZA
  INHAMBANE
  MANICA
  SOFALA
  TETE
  ZAMBEZIA
  NAMPULA
  CABO_DELGADO
  NIASSA
}

enum PreLevel {
  CLASSE_10
  CLASSE_12
  LICENCIATURA
}

enum DocumentType {
  BI
  PASSAPORTE
}

enum Status {
  PENDENTE
  CONFIRMADO
  CANCELADO
  TRANCADO
  INSCRITO
  NAO_INSCRITO
}

enum StatusTeacher {
  ATIVO
  INATIVO
}

enum SubjectType {
  COMPLEMENTAR
  NUCLEAR
}

enum YearStudy {
  PRIMEIRO_ANO
  SEGUNDO_ANO
  TERCEIRO_ANO
  QUARTO_ANO
}

enum Semester {
  PRIMEIRO_SEMESTRE
  SEGUNDO_SEMESTRE
}

enum Result {
  APROVADO
  REPROVADO
  EM_ANDAMENTO
}

enum StatusClasses {
  EM_ATIVIDADE
  DESATIVADO
}

enum TeacherType {
  COORDENADOR
  DOCENTE
  AUXILIAR
}

enum AssessmentType {
  TESTE_INDIVIDUAL
  TESTE_GRUPO
  TRABALHO_INDIVIDUAL
  TRABALHO_GRUPO
  EXAME_NORMAL
  EXAME_RECORRENCIA
  EXAME_ESPECIAL
}

enum Job_Position {
  ADMIN_IT
  CTA_ADMIN_FINANCEIRO
  CTA_ADMIN_REG_ACADEMICO
  CTA_ADMIN_RH
  CTA_ADMIN_BIBLIOTECA
  CTA_ADMIN_COORDENADOR
  CTA_REG_ACADEMICO
  CTA_FINANCEIRO
  CTA_BIBLIOTECA
  CTA_DOCENTE
  CTA_RH
  CTA
  ESTUDANTE
}

model LoginData {
  id          String       @id @default(uuid())
  email       String       @unique
  contact     String
  password    String
  jobPosition Job_Position @map("job_position")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?    @map("updated_at")

  student Student? @relation // Relacionamento com Student

  @@map("login_data")
}

model Student {
  id                 String            @id @default(uuid())
  surname            String
  name               String
  dataOfBirth        DateTime          @map("date_of_birth")
  placeOfBirth       String            @map("place_of_birth")
  gender             Gender
  maritalStatus      MaritalStatus     @map("marital_status")
  provincyAddress    ProvincyAddress   @map("provincy_address")
  address            String
  fatherName         String            @map("father_name")
  motherName         String            @map("mother_name")
  documentType       DocumentType      @map("document_type")
  documentNumber     String            @map("document_number")
  documentIssuedAt   DateTime          @map("document_issued_at")
  documentExpiredAt  DateTime          @map("document_expired_at")
  nuit               Int               @unique
  educationOfficerId String?           @map("education_officer_id")
  loginId            String?           @unique @map("login_id")
  loginData          LoginData?        @relation(fields: [loginId], references: [id]) // Relacionamento com LoginData
  EducationOfficer   EducationOfficer? @relation(fields: [educationOfficerId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos:
  Registration     Registration[] // Relacionamento com Registration
  PreSchool        PreSchool[] // Relacionamento com PreSchool
  StudentSubject   StudentSubject[] // Relacionamento com StudentDiscipline
  StudentsClasses  StudentsClasses[]
  AssessmentResult AssessmentResult[]

  @@map("student")
}

model PreSchool {
  id             String          @id @default(uuid())
  schoolLevel    PreLevel        @map("school_level")
  schoolName     String          @map("school_name")
  schoolProvincy ProvincyAddress @map("school_provincy")
  studentId      String          @map("student_id")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  student Student @relation(fields: [studentId], references: [id])

  @@map("pre_school")
}

model EducationOfficer {
  id              String          @id @default(uuid())
  fullName        String
  profession      String
  dataOfBirth     DateTime        @map("data_of_birth")
  email           String?         @unique
  contact         String
  provincyAddress ProvincyAddress @map("provincy_address")
  address         String
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  student         Student[]

  @@map("education_officer")
}

model Course {
  id                 String         @id @default(uuid())
  courseName         String         @map("course_name")
  courseDescription  String?        @map("course_description")
  courseDuration     Int            @map("course_duration")
  levelCourse        LevelCourse    @map("level_course")
  period             Period
  totalVacancies     Int            @map("total_vacancies")
  availableVacancies Int?           @map("available_vacancies")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  Registration       Registration[]

  Classes Classes[]
  Subject Subject[]

  @@map("course")
}

model Registration {
  id                 String    @id @default(uuid())
  student_id         String
  course_id          String    @map("course_id")
  registrationStatus Status    @default(PENDENTE) @map("registration_status")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @map("updated_at")

  student Student @relation(fields: [student_id], references: [id])
  course  Course  @relation(fields: [course_id], references: [id])

  @@map("registration")
}

model Classes {
  id              String            @id @default(uuid())
  className       String            @map("class_name")
  course_id       String            @map("course_id")
  description     String
  status          StatusClasses     @default(DESATIVADO)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime?         @map("updated_at")
  course          Course            @relation(fields: [course_id], references: [id])
  StudentsClasses StudentsClasses[]

  @@map("classes")
}

model Subject {
  codigo         String           @id
  SubjectName    String           @map("Subject_name")
  year_study     YearStudy        @map("year_study")
  semester       Semester
  hcs            Int              @map("hcs")
  credits        Int
  SubjectType    SubjectType      @map("Subject_type")
  createdAt      DateTime         @default(now()) @map("created_at")
  courseId       String?          @map("course_id")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  Course         Course?          @relation(fields: [courseId], references: [id])
  StudentSubject StudentSubject[]
  TeacherSubject TeacherSubject[]
  Schedule       Schedule[]
  Assessment     Assessment[]
  StudyMaterial  StudyMaterial[]

  @@map("Subjects")
}

model StudentSubject {
  id        String    @id @default(uuid())
  studentId String    @map("student_id")
  subjectId String    @map("subject_id")
  status    Status    @default(NAO_INSCRITO)
  result    Result    @default(REPROVADO)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  student Student @relation(fields: [studentId], references: [id])
  Subject Subject @relation(fields: [subjectId], references: [codigo])

  @@map("student_Subject")
}

model Teacher {
  id             String           @id @default(uuid())
  fullName       String
  email          String           @unique
  contact        String
  profession     String
  type           TeacherType
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  TeacherSubject TeacherSubject[]

  @@map("teacher")
}

model TeacherSubject {
  id        String        @id @default(uuid())
  teacherId String        @map("teacher_id")
  subjectId String        @map("subject_id")
  status    StatusTeacher @default(INATIVO)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime?     @map("updated_at")

  teacher Teacher @relation(fields: [teacherId], references: [id])
  Subject Subject @relation(fields: [subjectId], references: [codigo])

  @@map("teacher_Subject")
}

model StudentsClasses {
  id        String    @id @default(uuid())
  studentId String    @map("student_id")
  classId   String    @map("class_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  student Student @relation(fields: [studentId], references: [id])
  classes Classes @relation(fields: [classId], references: [id])

  @@map("students_classes")
}

model Schedule {
  id        String   @id @default(uuid())
  weekDay   String // Exemplo: "Monday", "Tuesday", etc.
  startTime DateTime // Hora de início da aula (formato timestamp)
  endTime   DateTime // Hora de término da aula (formato timestamp)
  subjectId String // Relacionamento com a disciplina
  subject   Subject  @relation(fields: [subjectId], references: [codigo])
}

model Assessment {
  id               String             @id @default(uuid())
  name             String // Nome da avaliação (ex: Midterm, Final Exam)
  type             AssessmentType // Tipo de avaliação (ex: prova, quiz, tarefa)
  dateApplied      DateTime // Data em que a avaliação foi aplicada
  weight           Float
  subjectId        String // Relacionamento com a disciplina
  subject          Subject            @relation(fields: [subjectId], references: [codigo])
  AssessmentResult AssessmentResult[]
}

model AssessmentResult {
  id           String    @id @default(uuid()) // Identificador único
  assessmentId String // Relacionamento com a avaliação
  studentId    String // Relacionamento com o aluno
  grade        Float // Nota atribuída
  createdAt    DateTime  @default(now()) // Data de criação
  updatedAt    DateTime? @updatedAt // Data de atualização

  assessment Assessment @relation(fields: [assessmentId], references: [id])
  student    Student    @relation(fields: [studentId], references: [id])

  @@map("assessment_results")
}

model StudyMaterial {
  id        String  @id @default(uuid())
  name      String // Nome do material (ex: Livro, Slides)
  type      String // Tipo de material (ex: livro, PDF, vídeo)
  link      String? // Link para o material, se aplicável
  subjectId String // Relacionamento com a disciplina
  subject   Subject @relation(fields: [subjectId], references: [codigo])
}

model Employeers {
  id          String       @id @default(uuid())
  fullName    String
  email       String       @unique
  contact     String
  profession  String
  jobPosition Job_Position @map("job_position")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?    @map("updated_at")

  @@map("employeers")
}
