// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ===== ENUMS COMPARTILHADOS =====
enum LevelCourse {
  CURTA_DURACAO
  TECNICO_MEDIO
  LICENCIATURA
  RELIGIOSO
  MESTRADO
}

enum Period {
  LABORAL
  POS_LABORAL
}

enum Gender {
  MASCULINO
  FEMININO
}

enum MaritalStatus {
  SOLTEIRO
  CASADO
  DIVORCIADO
  VIUVO
}

enum ProvincyAddress {
  MAPUTO_CIDADE
  MAPUTO_PROVINCIA
  GAZA
  INHAMBANE
  MANICA
  SOFALA
  TETE
  ZAMBEZIA
  NAMPULA
  CABO_DELGADO
  NIASSA
}

enum PreLevel {
  CLASSE_10
  CLASSE_12
  LICENCIATURA
}

enum DocumentType {
  BI
  PASSAPORTE
}

enum Status {
  PENDENTE
  CONFIRMADO
  CANCELADO
  TRANCADO
  INSCRITO
  NAO_INSCRITO
}

enum StatusTeacher {
  ATIVO
  INATIVO
}

enum SubjectType {
  COMPLEMENTAR
  NUCLEAR
}

enum YearStudy {
  PRIMEIRO_ANO
  SEGUNDO_ANO
  TERCEIRO_ANO
  QUARTO_ANO
}

enum Semester {
  PRIMEIRO_SEMESTRE
  SEGUNDO_SEMESTRE
}

enum Result {
  APROVADO
  REPROVADO
  EM_ANDAMENTO
}

enum StatusClasses {
  EM_ATIVIDADE
  DESATIVADO
}

enum TeacherType {
  COORDENADOR
  DOCENTE
  AUXILIAR
}

enum AssessmentType {
  TESTE_INDIVIDUAL
  TESTE_GRUPO
  TRABALHO_INDIVIDUAL
  TRABALHO_GRUPO
  EXAME_NORMAL
  EXAME_RECORRENCIA
  EXAME_ESPECIAL
}

enum Job_Position {
  ADMIN_IT
  CTA_ADMIN_FINANCEIRO
  CTA_ADMIN_REG_ACADEMICO
  CTA_ADMIN_RH
  CTA_ADMIN_BIBLIOTECA
  CTA_ADMIN_COORDENADOR
  CTA_REG_ACADEMICO
  CTA_FINANCEIRO
  CTA_BIBLIOTECA
  CTA_DOCENTE
  CTA_RH
  CTA
  ESTUDANTE
}

// ===== MODELOS DE AUTENTICAÇÃO =====
model LoginData {
  id          String       @id @default(uuid())
  email       String       @unique
  contact     String
  password    String
  jobPosition Job_Position @map("job_position")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?    @map("updated_at")

  student Student? @relation

  @@map("login_data")
}

model Employeers {
  id          String       @id @default(uuid())
  surname     String
  name        String
  email       String       @unique
  contact     String
  jobPosition Job_Position @map("job_position")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@map("employeers")
}

// ===== MODELOS DE ESTUDANTES =====
model Student {
  id                 String            @id @default(uuid())
  surname            String
  name               String
  dataOfBirth        DateTime          @map("date_of_birth")
  placeOfBirth       String            @map("place_of_birth")
  gender             Gender
  maritalStatus      MaritalStatus     @map("marital_status")
  provincyAddress    ProvincyAddress   @map("provincy_address")
  address            String
  fatherName         String            @map("father_name")
  motherName         String            @map("mother_name")
  documentType       DocumentType      @map("document_type")
  documentNumber     String            @map("document_number")
  documentIssuedAt   DateTime          @map("document_issued_at")
  documentExpiredAt  DateTime          @map("document_expired_at")
  nuit               Int               @unique
  educationOfficerId String?           @map("education_officer_id")
  loginId            String?           @unique @map("login_id")
  loginData          LoginData?        @relation(fields: [loginId], references: [id])
  EducationOfficer   EducationOfficer? @relation(fields: [educationOfficerId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Registration     Registration[]
  PreSchool        PreSchool[]
  StudentSubject   StudentSubject[]
  StudentsClasses  StudentsClasses[]
  AssessmentResult AssessmentResult[]
  Invoice          Invoice[]

  @@map("student")
}

model PreSchool {
  id             String          @id @default(uuid())
  schoolLevel    PreLevel        @map("school_level")
  schoolName     String          @map("school_name")
  schoolProvincy ProvincyAddress @map("school_provincy")
  studentId      String          @map("student_id")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  student Student @relation(fields: [studentId], references: [id])

  @@map("pre_school")
}

model EducationOfficer {
  id              String          @id @default(uuid())
  fullName        String
  profession      String
  dataOfBirth     DateTime        @map("data_of_birth")
  email           String?         @unique
  contact         String
  provincyAddress ProvincyAddress @map("provincy_address")
  address         String
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  student         Student[]

  @@map("education_officer")
}

// ===== MODELOS ACADÊMICOS =====
model Course {
  id                 String      @id @default(uuid())
  courseName         String      @map("course_name")
  courseDescription  String?     @map("course_description")
  courseDuration     Int         @map("course_duration")
  levelCourse        LevelCourse @map("level_course")
  period             Period
  totalVacancies     Int         @map("total_vacancies")
  availableVacancies Int?        @map("available_vacancies")
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")

  Registration Registration[]
  Classes      Classes[]
  Subject      Subject[]
  Invoice      Invoice[]

  @@map("course")
}

model Registration {
  id                 String    @id @default(uuid())
  studentId          String    @map("student_id")
  courseId           String    @map("course_id")
  registrationStatus Status    @default(PENDENTE) @map("registration_status")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @map("updated_at")

  student Student @relation(fields: [studentId], references: [id])
  course  Course  @relation(fields: [courseId], references: [id])

  @@map("registration")
}

model Subject {
  id          String      @id @default(uuid())
  subjectName String      @map("subject_name")
  subjectType SubjectType @map("subject_type")
  courseId    String      @map("course_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  course         Course           @relation(fields: [courseId], references: [id])
  StudentSubject StudentSubject[]
  TeacherSubject TeacherSubject[]
  Assessment     Assessment[]

  @@map("subject")
}

model StudentSubject {
  id        String   @id @default(uuid())
  studentId String   @map("student_id")
  subjectId String   @map("subject_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  student Student @relation(fields: [studentId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@map("student_subject")
}

model Classes {
  id            String        @id @default(uuid())
  className     String        @map("class_name")
  courseId      String        @map("course_id")
  yearStudy     YearStudy     @map("year_study")
  semester      Semester
  statusClasses StatusClasses @map("status_classes")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  course          Course            @relation(fields: [courseId], references: [id])
  StudentsClasses StudentsClasses[]
  Schedule        Schedule[]

  @@map("classes")
}

model StudentsClasses {
  id        String   @id @default(uuid())
  studentId String   @map("student_id")
  classId   String   @map("class_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  student Student @relation(fields: [studentId], references: [id])
  class   Classes @relation(fields: [classId], references: [id])

  @@map("students_classes")
}

model Schedule {
  id        String   @id @default(uuid())
  classId   String   @map("class_id")
  dayOfWeek Int
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  class Classes @relation(fields: [classId], references: [id])

  @@map("schedule")
}

model Assessment {
  id             String         @id @default(uuid())
  subjectId      String         @map("subject_id")
  assessmentType AssessmentType @map("assessment_type")
  date           DateTime
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  subject          Subject            @relation(fields: [subjectId], references: [id])
  AssessmentResult AssessmentResult[]

  @@map("assessment")
}

model AssessmentResult {
  id           String   @id @default(uuid())
  studentId    String   @map("student_id")
  assessmentId String   @map("assessment_id")
  result       Result
  grade        Float
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  student    Student    @relation(fields: [studentId], references: [id])
  assessment Assessment @relation(fields: [assessmentId], references: [id])

  @@map("assessment_result")
}

// ===== MODELOS DE PROFESSORES =====
model Teacher {
  id            String        @id @default(uuid())
  surname       String
  name          String
  email         String        @unique
  contact       String
  teacherType   TeacherType   @map("teacher_type")
  statusTeacher StatusTeacher @map("status_teacher")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  TeacherSubject TeacherSubject[]

  @@map("teacher")
}

model TeacherSubject {
  id        String   @id @default(uuid())
  teacherId String   @map("teacher_id")
  subjectId String   @map("subject_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  teacher Teacher @relation(fields: [teacherId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@map("teacher_subject")
}

// ===== MODELOS DE MENSALIDADES =====
enum InvoiceStatus {
  PENDENTE
  PAGO
  ATRASADO
  CANCELADO
  PARCIALMENTE_PAGO
}

enum InvoiceType {
  MENSALIDADE
  MATRICULA
  PROPINA
  MATERIAL
  OUTROS
}

enum PaymentMethod {
  DINHEIRO
  TRANSFERENCIA
  DEPOSITO
  CARTAO_CREDITO
  CARTAO_DEBITO
  OUTROS
}

enum Month {
  JANEIRO
  FEVEREIRO
  MARCO
  ABRIL
  MAIO
  JUNHO
  JULHO
  AGOSTO
  SETEMBRO
  OUTUBRO
  NOVEMBRO
  DEZEMBRO
}

model Invoice {
  id                 String        @id @default(uuid())
  studentId          String        @map("student_id")
  courseId           String        @map("course_id")
  type               InvoiceType   @default(MENSALIDADE)
  amount             Float
  dueDate            DateTime      @map("due_date")
  status             InvoiceStatus @default(PENDENTE)
  month              Month?        @map("month")
  year               Int?          @map("year")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  cancelledAt        DateTime?     @map("cancelled_at")
  cancelledBy        String?       @map("cancelled_by")
  cancellationReason String?       @map("cancellation_reason")

  student         Student           @relation(fields: [studentId], references: [id])
  course          Course            @relation(fields: [courseId], references: [id])
  payments        Payment[]
  history         InvoiceHistory[]
  LateFee         LateFee[]
  PaymentReminder PaymentReminder[]

  @@map("invoice")
}

model Payment {
  id            String        @id @default(uuid())
  invoiceId     String        @map("invoice_id")
  amount        Float
  paymentMethod PaymentMethod @map("payment_method")
  paymentDate   DateTime      @map("payment_date")
  reference     String? // Número de referência do pagamento
  description   String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payment")
}

model InvoiceHistory {
  id          String        @id @default(uuid())
  invoiceId   String        @map("invoice_id")
  status      InvoiceStatus
  description String
  createdAt   DateTime      @default(now()) @map("created_at")
  createdBy   String        @map("created_by")

  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("invoice_history")
}

model LateFee {
  id        String   @id @default(uuid())
  invoiceId String   @map("invoice_id")
  amount    Float
  daysLate  Int      @map("days_late")
  appliedAt DateTime @map("applied_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("late_fee")
}

model PaymentReminder {
  id           String   @id @default(uuid())
  invoiceId    String   @map("invoice_id")
  sentAt       DateTime @map("sent_at")
  reminderType String   @map("reminder_type") // EMAIL, SMS, WHATSAPP
  status       String // ENVIADO, FALHOU
  createdAt    DateTime @default(now()) @map("created_at")

  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payment_reminder")
}
